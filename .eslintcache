[{"/Users/danoved/Source/waypoint/packages/frontend/src/index.tsx":"1","/Users/danoved/Source/waypoint/packages/frontend/src/reportWebVitals.ts":"2","/Users/danoved/Source/waypoint/packages/frontend/src/App.tsx":"3","/Users/danoved/Source/waypoint/packages/frontend/src/web3/client.ts":"4","/Users/danoved/Source/waypoint/packages/frontend/src/components/Navbar.tsx":"5","/Users/danoved/Source/waypoint/packages/frontend/src/components/YourWorlds.tsx":"6","/Users/danoved/Source/waypoint/packages/frontend/src/components/Explore.tsx":"7","/Users/danoved/Source/waypoint/packages/frontend/src/World/New.tsx":"8","/Users/danoved/Source/waypoint/packages/frontend/src/types/shared.ts":"9","/Users/danoved/Source/waypoint/packages/frontend/src/types/elements.ts":"10","/Users/danoved/Source/waypoint/packages/frontend/src/editorDb/mutations.ts":"11","/Users/danoved/Source/waypoint/packages/frontend/src/components/Web3Login.tsx":"12","/Users/danoved/Source/waypoint/packages/frontend/src/World/Scene.tsx":"13","/Users/danoved/Source/waypoint/packages/frontend/src/editorDb/utils.ts":"14","/Users/danoved/Source/waypoint/packages/frontend/src/components/Icons.tsx":"15","/Users/danoved/Source/waypoint/packages/frontend/src/World/DynamicEnvironment.tsx":"16","/Users/danoved/Source/waypoint/packages/frontend/src/World/Controls.tsx":"17","/Users/danoved/Source/waypoint/packages/frontend/src/World/ElementsTree.tsx":"18","/Users/danoved/Source/waypoint/packages/frontend/src/lib/ipfs.ts":"19","/Users/danoved/Source/waypoint/packages/frontend/src/World/Elements/Model.tsx":"20"},{"size":554,"mtime":1658175695676,"results":"21","hashOfConfig":"22"},{"size":425,"mtime":1658175695677,"results":"23","hashOfConfig":"22"},{"size":849,"mtime":1658175695673,"results":"24","hashOfConfig":"22"},{"size":901,"mtime":1658175695678,"results":"25","hashOfConfig":"22"},{"size":2474,"mtime":1658175695675,"results":"26","hashOfConfig":"22"},{"size":1998,"mtime":1658175695675,"results":"27","hashOfConfig":"22"},{"size":120,"mtime":1658175695674,"results":"28","hashOfConfig":"22"},{"size":1389,"mtime":1658175695674,"results":"29","hashOfConfig":"22"},{"size":207,"mtime":1658175695678,"results":"30","hashOfConfig":"22"},{"size":1137,"mtime":1658175695678,"results":"31","hashOfConfig":"22"},{"size":1976,"mtime":1658175695675,"results":"32","hashOfConfig":"22"},{"size":6299,"mtime":1658175695675,"results":"33","hashOfConfig":"22"},{"size":995,"mtime":1658175695674,"results":"34","hashOfConfig":"22"},{"size":128,"mtime":1658175695676,"results":"35","hashOfConfig":"22"},{"size":7253,"mtime":1658175695675,"results":"36","hashOfConfig":"22"},{"size":423,"mtime":1658175695674,"results":"37","hashOfConfig":"22"},{"size":208,"mtime":1658175695673,"results":"38","hashOfConfig":"22"},{"size":1150,"mtime":1658175695674,"results":"39","hashOfConfig":"22"},{"size":1346,"mtime":1658175695677,"results":"40","hashOfConfig":"22"},{"size":557,"mtime":1658175695674,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gx9zx0",{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/danoved/Source/waypoint/packages/frontend/src/index.tsx",[],"/Users/danoved/Source/waypoint/packages/frontend/src/reportWebVitals.ts",[],"/Users/danoved/Source/waypoint/packages/frontend/src/App.tsx",[],"/Users/danoved/Source/waypoint/packages/frontend/src/web3/client.ts",[],"/Users/danoved/Source/waypoint/packages/frontend/src/components/Navbar.tsx",[],"/Users/danoved/Source/waypoint/packages/frontend/src/components/YourWorlds.tsx",["86","87","88","89"],"import { useQuery, gql, useMutation } from \"@apollo/client\";\nimport { useCallback } from \"react\";\n// import {\n//   GET_LOCAL_WORLDS,\n//   WorldsData,\n//   ADD_WORLD,\n//   addWorld,\n// } from \"../editorDb/localDb\";\nimport { Link } from \"react-router-dom\";\n\nconst Drafts = () => {\n  // const { loading, error, data } = useQuery<WorldsData>(GET_LOCAL_WORLDS);\n\n  return null;\n};\n\nconst CreateWorldButton = () => {\n  // const [addWorld, { data, loading, error }] = useMutation<\n  //   {\n  //     name: string;\n  //   },\n  //   {\n  //     name: string;\n  //   }\n  // >(ADD_WORLD, {\n  //   update(cache, { data }) {\n  //     debugger;\n  //     if (!data) return;\n\n  //     cache.modify({\n  //       fields: {\n  //         worlds(existingWorlds = []) {\n  //           const newWorldRef = cache.writeFragment({\n  //             data,\n  //             fragment: gql`\n  //               fragment NewWorld on World {\n  //                 id\n  //                 name\n  //               }\n  //             `,\n  //           });\n  //           return [...existingWorlds, newWorldRef];\n  //         },\n  //       },\n  //     });\n  //   },\n  // });\n\n  // const worlds = useQuery<WorldsData>(GET_LOCAL_WORLDS);\n\n  // const handleCreateWorldClick = useCallback(async () => {\n  //   addWorld(\"crut\");\n  //   alert(\"World Created\");\n  // }, [addWorld]);\n\n  // if (loading) return <>Submitting...</>;\n  // if (error) return <>`Submission error! ${error.message}`</>;\n\n  return (\n    <>\n      <Link\n        className=\"m-auto p-4 rounded-full bg-green-600 text-white text-md font-medium hover:bg-green-900 active:bg-green-700 focus:outline-none focus:ring focus:ring-green-300\"\n        to=\"/worlds/new\"\n      >\n        Create a World\n      </Link>\n      <ul>\n        {/* {worlds.data?.worlds.map((world) => (\n          <li>{world.name}</li>\n        ))} */}\n      </ul>\n    </>\n  );\n};\n\nconst YourWorlds = () => {\n  return (\n    <>\n      <CreateWorldButton />\n      <Drafts />\n    </>\n  );\n};\n\nexport default YourWorlds;\n","/Users/danoved/Source/waypoint/packages/frontend/src/components/Explore.tsx",[],"/Users/danoved/Source/waypoint/packages/frontend/src/World/New.tsx",["90"],"import { useState } from \"react\";\nimport {\n  applyUpdates,\n  createNewElement,\n  updateEnvironment,\n} from \"../editorDb/mutations\";\nimport { EnvironmentConfig, SceneConfiguration } from \"../types/scene\";\nimport { Element, ElementType } from \"../types/elements\";\nimport { FileLocationKind } from \"../types/shared\";\nimport Scene from \"./Scene\";\n\nconst randomEnvironment = (): EnvironmentConfig => {\n  // todo: randomize\n  return {\n    environmentMap: {\n      kind: FileLocationKind.https,\n      url: \"https://firebasestorage.googleapis.com/v0/b/mintxr-experiment.appspot.com/o/kloppenheim_02_1k.pic?alt=media&token=42249658-2916-496b-84ab-f66481b46668\",\n    },\n  };\n};\n\nconst marbleTheatorModel = (): Element => ({\n  elementType: ElementType.Model,\n  transform: {\n    position: {\n      y: -4,\n    },\n  },\n  modelConfig: {\n    file: {\n      kind: FileLocationKind.https,\n      url: \"https://firebasestorage.googleapis.com/v0/b/mintxr-experiment.appspot.com/o/MarbleTheater-Metallic.glb?alt=media&token=137e6259-00c5-46e3-8a0b-fbe1398b98c1\",\n    },\n  },\n});\n\nconst makeNewScene = (): SceneConfiguration => {\n  return applyUpdates({}, [\n    updateEnvironment(randomEnvironment()),\n    createNewElement(marbleTheatorModel()),\n  ]);\n};\n\nconst New = () => {\n  const [scene, setScene] = useState<SceneConfiguration>(() => makeNewScene());\n\n  return <Scene scene={scene} />;\n};\n\nexport default New;\n","/Users/danoved/Source/waypoint/packages/frontend/src/types/shared.ts",[],"/Users/danoved/Source/waypoint/packages/frontend/src/types/elements.ts",[],"/Users/danoved/Source/waypoint/packages/frontend/src/editorDb/mutations.ts",[],"/Users/danoved/Source/waypoint/packages/frontend/src/components/Web3Login.tsx",["91","92","93","94"],"import { useCallback, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { WalletConnectIcon, MetamaskIcon } from \"./Icons\";\nimport { useAccount, useConnect, useEnsName, useEnsAvatar } from \"wagmi\";\n\nconst Web3LoginModal = ({\n  show,\n  handleClose,\n}: {\n  show: boolean;\n  handleClose: () => void;\n}) => {\n  //   const { data: account } = useAccount();\n  const { connect, connectors, error, pendingConnector } = useConnect();\n\n  return (\n    <div\n      id=\"crypto-modal\"\n      tabIndex={-1}\n      aria-hidden=\"true\"\n      className={`${clsx(\n        { hidden: !show },\n        \"overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 w-full md:inset-0 h-modal md:h-full\"\n      )}`}\n    >\n      <div className=\"relative p-4 w-full max-w-md h-full md:h-auto\">\n        {/* <!-- Modal content --> */}\n        <div className=\"relative bg-white rounded-lg shadow dark:bg-gray-700\">\n          <button\n            type=\"button\"\n            className=\"absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white\"\n            data-modal-toggle=\"crypto-modal\"\n            onClick={handleClose}\n          >\n            <svg\n              aria-hidden=\"true\"\n              className=\"w-5 h-5\"\n              fill=\"currentColor\"\n              viewBox=\"0 0 20 20\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\n                clipRule=\"evenodd\"\n              ></path>\n            </svg>\n            <span className=\"sr-only\">Close modal</span>\n          </button>\n          {/* <!-- Modal header --> */}\n          <div className=\"py-4 px-6 rounded-t border-b dark:border-gray-600\">\n            <h3 className=\"text-base font-semibold text-gray-900 lg:text-xl dark:text-white\">\n              Connect wallet\n            </h3>\n          </div>\n          {/* <!-- Modal body --> */}\n          <div className=\"p-6\">\n            <p className=\"text-sm font-normal text-gray-500 dark:text-gray-400\">\n              Connect with one of our available wallet providers or create a new\n              one.\n            </p>\n            <ul className=\"my-4 space-y-3\">\n              {connectors.map((connector) => (\n                <li key={connector.id}>\n                  <a\n                    href=\"#\"\n                    className=\"flex items-center p-3 text-base font-bold text-gray-900 bg-gray-50 rounded-lg hover:bg-gray-100 group hover:shadow dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white\"\n                    // @ts-ignore\n                    disabled={!connector.ready}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      connect({ connector });\n                    }}\n                  >\n                    {connector.name === \"MetaMask\" && (\n                      <>\n                        <MetamaskIcon />\n                        <span className=\"flex-1 ml-3 whitespace-nowrap\">\n                          MetaMask\n                        </span>\n                        <span className=\"inline-flex items-center justify-center px-2 py-0.5 ml-3 text-xs font-medium text-gray-500 bg-gray-200 rounded dark:bg-gray-700 dark:text-gray-400\">\n                          Popular\n                        </span>\n                      </>\n                    )}\n                    {connector.name === \"WalletConnect\" && (\n                      <>\n                        <WalletConnectIcon />\n                        <span className=\"flex-1 ml-3 whitespace-nowrap\">\n                          WalletConnect\n                        </span>\n                      </>\n                    )}\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst LoginButton = () => {\n  const [modalOpened, setModalOpened] = useState(false);\n\n  const handleOpenModel = useCallback(() => {\n    setModalOpened(true);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    setModalOpened(false);\n  }, []);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        data-modal-toggle=\"crypto-modal\"\n        className=\"text-gray-900 bg-white hover:bg-gray-100 border border-gray-200 focus:ring-4 focus:outline-none focus:ring-gray-100 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-gray-600 dark:bg-gray-800 dark:border-gray-700 dark:text-white dark:hover:bg-gray-700\"\n        onClick={handleOpenModel}\n      >\n        <svg\n          aria-hidden=\"true\"\n          className=\"mr-2 w-4 h-4\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"2\"\n            d=\"M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1\"\n          ></path>\n        </svg>\n        Connect wallet\n      </button>\n      {<Web3LoginModal show={modalOpened} handleClose={handleClose} />}\n    </>\n  );\n};\n\nconst Web3Profile = ({ address }: { address: string }) => {\n  const { data, isError, isLoading } = useEnsName({\n    address,\n  });\n  const { data: avatarData } = useEnsAvatar({\n    addressOrName: address,\n  });\n\n  if (isLoading) return <div>Fetching name…</div>;\n  if (isError) return <div>Error fetching name</div>;\n  return (\n    <>\n      <div className=\"text-sm\">\n        @{data} {avatarData}\n      </div>\n      <div className=\"text-xs font-light w-20 truncate hover:text-clip\">\n        {address}\n      </div>\n    </>\n  );\n};\n\nconst Web3Login = () => {\n  const { connector: activeConnector, isConnected, address } = useAccount();\n\n  return (\n    <>\n      {isConnected && address && (\n        <div>\n          <Web3Profile address={address} />\n        </div>\n      )}\n      {!isConnected && <LoginButton />}\n    </>\n  );\n};\n\nexport default Web3Login;\n","/Users/danoved/Source/waypoint/packages/frontend/src/World/Scene.tsx",["95"],"import { Canvas } from \"@react-three/fiber\";\nimport { useCallback, useState } from \"react\";\nimport { SceneConfiguration } from \"../types/scene\";\nimport Controls from \"./Controls\";\nimport DynamicEnvironment from \"./DynamicEnvironment\";\nimport ElementsTree from \"./ElementsTree\";\n\nconst Scene = ({ scene }: { scene?: SceneConfiguration }) => {\n  const [hasClicked, setHasClicked] = useState(false);\n\n  const [listener, setListener] = useState<AudioListener>();\n\n  const onClicked = useCallback(() => {\n    if (hasClicked) return;\n    setHasClicked(true);\n\n    setListener(new AudioListener());\n  }, [hasClicked]);\n\n  return (\n    <>\n      <div className=\"w-screen h-screen\">\n        <Canvas onClick={onClicked}>\n          {scene && (\n            <>\n              <DynamicEnvironment environment={scene.environment} />\n              <ElementsTree elements={scene.elements} />\n            </>\n          )}\n          <Controls />\n        </Canvas>\n      </div>\n    </>\n  );\n};\n\nexport default Scene;\n","/Users/danoved/Source/waypoint/packages/frontend/src/editorDb/utils.ts",[],"/Users/danoved/Source/waypoint/packages/frontend/src/components/Icons.tsx",[],"/Users/danoved/Source/waypoint/packages/frontend/src/World/DynamicEnvironment.tsx",[],"/Users/danoved/Source/waypoint/packages/frontend/src/World/Controls.tsx",[],"/Users/danoved/Source/waypoint/packages/frontend/src/World/ElementsTree.tsx",[],"/Users/danoved/Source/waypoint/packages/frontend/src/lib/ipfs.ts",[],"/Users/danoved/Source/waypoint/packages/frontend/src/World/Elements/Model.tsx",[],{"ruleId":"96","severity":1,"message":"97","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":18},{"ruleId":"96","severity":1,"message":"100","line":1,"column":20,"nodeType":"98","messageId":"99","endLine":1,"endColumn":23},{"ruleId":"96","severity":1,"message":"101","line":1,"column":25,"nodeType":"98","messageId":"99","endLine":1,"endColumn":36},{"ruleId":"96","severity":1,"message":"102","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":21},{"ruleId":"96","severity":1,"message":"103","line":45,"column":17,"nodeType":"98","messageId":"99","endLine":45,"endColumn":25},{"ruleId":"96","severity":1,"message":"104","line":14,"column":32,"nodeType":"98","messageId":"99","endLine":14,"endColumn":37},{"ruleId":"96","severity":1,"message":"105","line":14,"column":39,"nodeType":"98","messageId":"99","endLine":14,"endColumn":55},{"ruleId":"106","severity":1,"message":"107","line":65,"column":19,"nodeType":"108","endLine":74,"endColumn":20},{"ruleId":"96","severity":1,"message":"109","line":169,"column":22,"nodeType":"98","messageId":"99","endLine":169,"endColumn":37},{"ruleId":"96","severity":1,"message":"110","line":11,"column":10,"nodeType":"98","messageId":"99","endLine":11,"endColumn":18},"@typescript-eslint/no-unused-vars","'useQuery' is defined but never used.","Identifier","unusedVar","'gql' is defined but never used.","'useMutation' is defined but never used.","'useCallback' is defined but never used.","'setScene' is assigned a value but never used.","'error' is assigned a value but never used.","'pendingConnector' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'activeConnector' is assigned a value but never used.","'listener' is assigned a value but never used."]